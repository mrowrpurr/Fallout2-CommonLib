#include "Waterchip.h"
#include "Common\Logger.h"
#include "Common\Test\LoggerTestHelper.h"

#include "sfall/lib.arrays.h"
#include "sfall/lib.strings.h"

// Mock debug() output and send it to Logger (which has test logs enabled)
#define __formatted_debug_output(output) log_info(output)

// DEBUG_PREFIX is required for FormattedDebug (although it can be empty)
#define DEBUG_PREFIX "[The Prefix] "

// Include the core FormattedDebug header
#include "Common/Private/FormattedDebugCore.h"

// Assert the debug output (including the DEBUG_PREFIX at the start)
#define expect_debug_to_receive(text) \
    expect(most_recent_test_log_message) to_equal(DEBUG_PREFIX + text)

describe("Formatted Debug Helper") begin

    setup_once begin
        enable_test_logging;
        hide_log_level_in_logs;
        clear_test_log_messages;
        expect(test_log_count) to_be_zero;
    end

    test("debug() is a shortcut for debug_msg()") begin
        debug("Hello");
        expect_debug_to_receive("Hello");
    end

    test("debug_array() outputs stringified representation of array") begin
        variable seq_array = [69, "Four Twenty"];
        debug_formatted_array(seq_array);
        expect_debug_to_receive("List(2): [69, Four Twenty]");

        variable map = { "num": 69, "text": "Four Twenty" };
        debug_formatted_array(map);
        expect_debug_to_receive("Map(2): {num: 69, text: Four Twenty}");
    end

    test("debug1, debug2, debug3, debug4, debug5, debug6") begin
        debug1("Hello", 69);
        expect_debug_to_receive("Hello (69)");

        debug2("Hello", 69, 420);
        expect_debug_to_receive("Hello (69) (420)");

        debug3("Wassup?", 42, 69, "some string");
        expect_debug_to_receive("Wassup? (42) (69) (some string)");

        debug4("Wassup?", 123, 42, 69, 420);
        expect_debug_to_receive("Wassup? (123) (42) (69) (420)");

        debug5("Sup?", 999, 123, 420.69, 69, 420);
        expect_debug_to_receive("Sup? (999) (123) (420.69000) (69) (420)");

        debug6("Sup?", 999, 123, 42, 69, 420, 22);
        expect_debug_to_receive("Sup? (999) (123) (42) (69) (420) (22)");
    end

    test("debug1f, debug2f, debug3f, debug4f, debug5f, debug6f") begin
        debug1f("Hi %s There", 69);
        expect_debug_to_receive("Hi 69 There");

        debug2f("Hi %s There %s", 69, 420);
        expect_debug_to_receive("Hi 69 There 420");

        debug3f("%s Sup? %s %s", 42, 69, "a string");
        expect_debug_to_receive("42 Sup? 69 a string");

        // I consistently get 420.690002
        // If this test can be flaky, change it to check that the text
        // *starts with* "123 is 420.690" and *ends *with* "and 69 is 420"
        debug4f("%s is %f and %s is %s", 123, 420.69, 69, 420);
        expect_debug_to_receive("123 is 420.690002 and 69 is 420");

        debug5f("Lots %s and %s & %s & %s and also %s", 999, 123, 42, 69, 420);
        expect_debug_to_receive("Lots 999 and 123 & 42 & 69 and also 420");

        debug6f("%s So Many %s and %s & %s & %s and also %s", 999, 123, 42, 69, 420, 22);
        expect_debug_to_receive("999 So Many 123 and 42 & 69 & 420 and also 22");
    end
end
