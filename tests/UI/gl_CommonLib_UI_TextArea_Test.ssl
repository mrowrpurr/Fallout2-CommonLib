#include "Waterchip.h"
#include "Common/UI/TextArea.h"

variable _text_areas;

// Helper to create text area.
// Also sets it aside to be destroyed after the test runs.
procedure create_textarea(variable options = 0) begin
    if not _text_areas then begin
        _text_areas = [];
        fix_array(_text_areas);
    end
    variable text_area = TextArea_Create(options);
    call array_push(_text_areas, text_area);
    return text_area;
end

describe("TextArea") begin

    variable text_area;

    teardown begin
        if _text_areas then begin
            foreach text_area in _text_areas call TextArea_Destroy(text_area);
            free_array(_text_areas);
            _text_areas = 0;
        end
    end

    it("has sensible defaults") begin
        text_area = create_textarea;

        // Color defaults to white
        expect(TextArea_DefaultColor_get(text_area)) to_equal("FFFFFF");

        // Font defaults to 101, most commonly used font
        expect(text_area.font) to_equal(101);

        // x,y default to 0,0
        expect(text_area.x) to_equal(0);
        expect(text_area.y) to_equal(0);

        // Width/Height to full screen
        expect(text_area.width)  to_equal(get_screen_width);
        expect(text_area.height) to_equal(get_screen_height);
    end

    it("can provide defaults when creating") begin
        text_area = create_textarea({
            "color":  "#abc",
            "font":   103,
            "height": 123,
            "width":  456,
            "x":      69,
            "y":      420
        });

        expect(text_area.font)   to_equal(103);
        expect(text_area.height) to_equal(123);
        expect(text_area.width)  to_equal(456);
        expect(text_area.x)      to_equal(69);
        expect(text_area.y)      to_equal(420);

        expect(TextArea_DefaultColor_get(text_area)) to_equal("AABBCC");
    end

    it("can provide custom name for text area (its window name)") begin
        text_area = create_textarea({ "name": "MyWindowName" });
        expect(text_area.name) to_equal("MyWindowName");
    end

    it("generates a random, unique window name by default") begin
        text_area = create_textarea;
        expect(text_area.name) not_to_be_empty;
        expect(text_area.name) to_start_with("CommonLibUiTextArea_");

        variable text_area2 = create_textarea;
        expect(text_area2.name) not_to_be_empty;
        expect(text_area2.name) to_start_with("CommonLibUiTextArea_");

        expect(text_area.name) not_to_equal(text_area2.name);
    end

    it("can set default color") begin
        text_area = create_textarea;
        expect(TextArea_DefaultColor_get(text_area)) to_equal("FFFFFF");

        TextArea_DefaultColor_set(text_area, "#abc");

        expect(TextArea_DefaultColor_get(text_area)) to_equal("AABBCC");

        TextArea_DefaultColor_set(text_area, "0055cc");

        expect(TextArea_DefaultColor_get(text_area)) to_equal("0055CC");
    end

    it("can add lines of text (of default color)") begin
        text_area = create_textarea;
        expect(len_array(text_area.all_lines))   to_be_zero;
        expect(len_array(text_area.line_colors)) to_be_zero;

        call TextArea_AddLine(text_area, "Hello, world!");

        expect(len_array(text_area.all_lines))   to_equal(1);
        expect(len_array(text_area.line_colors)) to_equal(1);
        expect(text_area.all_lines[0])           to_equal("Hello, world!");
        expect(text_area.line_colors[0])         to_equal("255255255");

        TextArea_DefaultColor_set(text_area, "#abc");
        call TextArea_AddLine(text_area, "Goodnight, moon!");

        expect(len_array(text_area.all_lines))   to_equal(2);
        expect(len_array(text_area.line_colors)) to_equal(2);
        expect(text_area.all_lines[0])           to_equal("Hello, world!");
        expect(text_area.line_colors[0])         to_equal("255255255");
        expect(text_area.all_lines[1])           to_equal("Goodnight, moon!");
        expect(text_area.line_colors[1])         to_equal("170187204"); // #abc
    end

    it("can add lines of text of certain color") begin
        text_area = create_textarea;
        expect(len_array(text_area.all_lines))   to_be_zero;
        expect(len_array(text_area.line_colors)) to_be_zero;

        call TextArea_AddColoredLine(text_area, "Hello, world!", "f0f");

        expect(len_array(text_area.all_lines))   to_equal(1);
        expect(len_array(text_area.line_colors)) to_equal(1);
        expect(text_area.all_lines[0])           to_equal("Hello, world!");
        expect(text_area.line_colors[0])         to_equal("255000255");

        call TextArea_AddColoredLine(text_area, "Goodnight, moon!", "abcdef");

        expect(len_array(text_area.all_lines))   to_equal(2);
        expect(len_array(text_area.line_colors)) to_equal(2);
        expect(text_area.all_lines[0])           to_equal("Hello, world!");
        expect(text_area.line_colors[0])         to_equal("255000255");
        expect(text_area.all_lines[1])           to_equal("Goodnight, moon!");
        expect(text_area.line_colors[1])         to_equal("171205239"); // #abcdef
    end

    it("can clear all lines") begin
        text_area = create_textarea;
        expect(len_array(text_area.all_lines))           to_be_zero;
        expect(len_array(text_area.line_colors))         to_be_zero;
        expect(len_array(text_area.visible_lines))       to_be_zero;
        expect(len_array(text_area.visible_line_colors)) to_be_zero;

        call TextArea_AddLine(text_area, "Hello, world!");
        call TextArea_AddColoredLine(text_area, "Goodnight, moon!", "abcdef");

        expect(len_array(text_area.all_lines))           to_equal(2);
        expect(len_array(text_area.line_colors))         to_equal(2);
        expect(len_array(text_area.visible_lines))       to_equal(2);
        expect(len_array(text_area.visible_line_colors)) to_equal(2);

        call TextArea_ClearLines(text_area);

        expect(len_array(text_area.all_lines))           to_be_zero;
        expect(len_array(text_area.line_colors))         to_be_zero;
        expect(len_array(text_area.visible_lines))       to_be_zero;
        expect(len_array(text_area.visible_line_colors)) to_be_zero;

        call TextArea_AddLine(text_area, "Hi again!");

        expect(len_array(text_area.all_lines))           to_equal(1);
        expect(len_array(text_area.line_colors))         to_equal(1);
        expect(len_array(text_area.visible_lines))       to_equal(1);
        expect(len_array(text_area.visible_line_colors)) to_equal(1);

        call TextArea_ClearLines(text_area);

        expect(len_array(text_area.all_lines))           to_be_zero;
        expect(len_array(text_area.line_colors))         to_be_zero;
        expect(len_array(text_area.visible_lines))       to_be_zero;
        expect(len_array(text_area.visible_line_colors)) to_be_zero;
    end

    it("can calculate visible lines based on text area width (with text wrapping)") begin
        text_area = create_textarea({
            "font": 101, "width": 250, "height": 1000, "color": "#0f0"
        });

        call TextArea_AddLine(text_area, "Hello, world! Hello, world! Hello, world!");
        call TextArea_AddColoredLine(text_area, "Goodnight, moon! Goodnight, moon!", "f0f");

        expect(len_array(text_area.visible_lines))       to_equal(2);
        expect(len_array(text_area.visible_line_colors)) to_equal(2);
        expect(text_area.visible_lines[0])               to_equal("Hello, world! Hello, world! Hello, world!");
        expect(text_area.visible_lines[1])               to_equal("Goodnight, moon! Goodnight, moon!");
        expect(text_area.visible_line_colors[0])         to_equal("000255000");
        expect(text_area.visible_line_colors[1])         to_equal("255000255");

        // Reduce the width & clear the text_area & re-add some lines
        text_area.width = 210; // Long enough for Goognight line, but not Hello
        call TextArea_ClearLines(text_area);
        call TextArea_AddLine(text_area, "Hello, world! Hello, world! Hello, world!");
        call TextArea_AddColoredLine(text_area, "Goodnight, moon! Goodnight, moon!", "f0f");

        expect(len_array(text_area.visible_lines))       to_equal(3);
        expect(len_array(text_area.visible_line_colors)) to_equal(3);
        expect(text_area.visible_lines[0]) to_equal("Hello, world! Hello, world! Hello,");
        expect(text_area.visible_lines[1]) to_equal(" world!");
        expect(text_area.visible_lines[2]) to_equal("Goodnight, moon! Goodnight, moon!");
        expect(text_area.visible_line_colors[0]) to_equal("000255000");
        expect(text_area.visible_line_colors[1]) to_equal("000255000");
        expect(text_area.visible_line_colors[2]) to_equal("255000255");

        // Reduce the width more
        text_area.width = 200; // No longer long enough for Goornight line
        call TextArea_ClearLines(text_area);
        call TextArea_AddLine(text_area, "Hello, world! Hello, world! Hello, world!");
        call TextArea_AddColoredLine(text_area, "Goodnight, moon! Goodnight, moon!", "f0f");

        expect(len_array(text_area.visible_lines))       to_equal(4);
        expect(len_array(text_area.visible_line_colors)) to_equal(4);
        expect(text_area.visible_lines[0]) to_equal("Hello, world! Hello, world! Hello,");
        expect(text_area.visible_lines[1]) to_equal(" world!");
        expect(text_area.visible_lines[2]) to_equal("Goodnight, moon! Goodnight,");
        expect(text_area.visible_lines[3]) to_equal(" moon!");
        expect(text_area.visible_line_colors[0]) to_equal("000255000");
        expect(text_area.visible_line_colors[1]) to_equal("000255000");
        expect(text_area.visible_line_colors[2]) to_equal("255000255");
        expect(text_area.visible_line_colors[3]) to_equal("255000255");

        // Reduce the even width more
        text_area.width = 100; // So small!
        call TextArea_ClearLines(text_area);
        call TextArea_AddColoredLine(text_area, "Goodnight, moon! Goodnight, moon!", "f0f");

        expect(len_array(text_area.visible_lines))       to_equal(4);
        expect(len_array(text_area.visible_line_colors)) to_equal(4);
        expect(text_area.visible_lines[0]) to_equal("Goodnight,");
        expect(text_area.visible_lines[1]) to_equal(" moon!");
        expect(text_area.visible_lines[2]) to_equal(" Goodnight,");
        expect(text_area.visible_lines[3]) to_equal(" moon!");
        expect(text_area.visible_line_colors[0]) to_equal("255000255");
        expect(text_area.visible_line_colors[1]) to_equal("255000255");
        expect(text_area.visible_line_colors[2]) to_equal("255000255");
        expect(text_area.visible_line_colors[3]) to_equal("255000255");

        // Then try impossibly small, like 10px - no words render this small
        text_area.width = 10; // So small!
        call TextArea_ClearLines(text_area);
        call TextArea_AddColoredLine(text_area, "Goodnight, moon! Goodnight, moon!", "f0f");

        // Just straight up can't render it.
        expect(len_array(text_area.visible_lines))       to_equal(0);
        expect(len_array(text_area.visible_line_colors)) to_equal(0);

        // Finally, try zero width
        text_area.width = 0; // So small!
        call TextArea_ClearLines(text_area);
        call TextArea_AddColoredLine(text_area, "Goodnight, moon! Goodnight, moon!", "f0f");

        // Just straight up can't render it.
        expect(len_array(text_area.visible_lines))       to_equal(0);
        expect(len_array(text_area.visible_line_colors)) to_equal(0);
    end

    todo("can calculate visible lines based on text area height");

    todo("scroll up/down to change visible lines shown");
end
