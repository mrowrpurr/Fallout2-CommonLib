#include "Waterchip.h"
#include "Common/UI/TextArea.h"

variable _text_areas;

// Helper to create text area.
// Also sets it aside to be destroyed after the test runs.
procedure create_textarea(variable options = 0) begin
    if not _text_areas then begin
        _text_areas = [];
        fix_array(_text_areas);
    end
    variable text_area = TextArea_Create(options);
    call array_push(_text_areas, text_area);
    return text_area;
end

describe("TextArea") begin

    variable text_area,
             text_area2;

    teardown begin
        if _text_areas then begin
            foreach text_area in _text_areas call TextArea_Destroy(text_area);
            free_array(_text_areas);
            _text_areas = 0;
        end
    end

    it("has sensible defaults") begin
        text_area = create_textarea;

        // Color defaults to white
        expect(TextArea_DefaultColor_get(text_area)) to_equal("FFFFFF");

        // Font defaults to 101, most commonly used font
        expect(TextArea_DefaultFont_get(text_area)) to_equal(101);

        // x,y default to 0,0
        expect(text_area.x) to_equal(0);
        expect(text_area.y) to_equal(0);

        // Height/Width should fill the screen, perhaps?
    end

    it("can provide defaults when creating") begin
        text_area = create_textarea({
            "color": "#abc",
            "font":  103
        });

        expect(TextArea_DefaultColor_get(text_area)) to_equal("AABBCC");
        expect(TextArea_DefaultFont_get(text_area)) to_equal(103);
    end

    it("can provide custom name for text area (its window name)") begin
        text_area = create_textarea({ "name": "MyWindowName" });
        expect(text_area.name) to_equal("MyWindowName");
    end

    it("generates a random, unique window name by default") begin
        text_area = create_textarea;
        expect(text_area.name) not_to_be_empty;
        expect(text_area.name) to_start_with("CommonLibUiTextArea_");

        text_area2 = create_textarea;
        expect(text_area2.name) not_to_be_empty;
        expect(text_area2.name) to_start_with("CommonLibUiTextArea_");

        expect(text_area.name) not_to_equal(text_area2.name);
    end

    it("can set default color") begin
        text_area = create_textarea;
        expect(TextArea_DefaultColor_get(text_area)) to_equal("FFFFFF");

        TextArea_DefaultColor_set(text_area, "#abc");

        expect(TextArea_DefaultColor_get(text_area)) to_equal("AABBCC");

        TextArea_DefaultColor_set(text_area, "0055cc");

        expect(TextArea_DefaultColor_get(text_area)) to_equal("0055CC");
    end

    todo("can provide default color when instantiating text area");

    it("can add lines of text (of default color)") begin
        text_area = create_textarea;
        expect(len_array(text_area.all_lines))           to_be_zero;
        expect(len_array(text_area.line_colors))         to_be_zero;
        expect(len_array(text_area.visible_lines))       to_be_zero;
        expect(len_array(text_area.visible_line_colors)) to_be_zero;

        TextArea_AddLine(text_area, "Hello, world!");

        expect(len_array(text_area.all_lines))           to_equal(1);
        expect(len_array(text_area.line_colors))         to_equal(1);
        // Visible lines don't change unless you TextArea_Refresh() - or something...
        expect(len_array(text_area.visible_lines))       to_be_zero;
        expect(len_array(text_area.visible_line_colors)) to_be_zero;

        expect(text_area.all_lines[0])   to_equal("Hello, world!");
        expect(text_area.line_colors[0]) to_equal("255255255");

        TextArea_DefaultColor_set(text_area, "#abc");
        TextArea_AddLine(text_area, "Goodnight, moon!");

        expect(len_array(text_area.all_lines))           to_equal(2);
        expect(len_array(text_area.line_colors))         to_equal(2);
        // Visible lines don't change unless you TextArea_Refresh() - or something...
        expect(len_array(text_area.visible_lines))       to_be_zero;
        expect(len_array(text_area.visible_line_colors)) to_be_zero;

        expect(text_area.all_lines[0])   to_equal("Hello, world!");
        expect(text_area.line_colors[0]) to_equal("255255255");
        expect(text_area.all_lines[1])   to_equal("Goodnight, moon!");
        expect(text_area.line_colors[1]) to_equal("170187204"); // #abc
    end

    it("can add lines of text of certain color") begin
        text_area = create_textarea;
        expect(len_array(text_area.all_lines))           to_be_zero;
        expect(len_array(text_area.line_colors))         to_be_zero;
        expect(len_array(text_area.visible_lines))       to_be_zero;
        expect(len_array(text_area.visible_line_colors)) to_be_zero;

        TextArea_AddColoredLine(text_area, "Hello, world!", "f0f");

        expect(len_array(text_area.all_lines))           to_equal(1);
        expect(len_array(text_area.line_colors))         to_equal(1);
        // Visible lines don't change unless you TextArea_Refresh() - or something...
        expect(len_array(text_area.visible_lines))       to_be_zero;
        expect(len_array(text_area.visible_line_colors)) to_be_zero;

        expect(text_area.all_lines[0])   to_equal("Hello, world!");
        expect(text_area.line_colors[0]) to_equal("255000255");

        TextArea_AddColoredLine(text_area, "Goodnight, moon!", "abcdef");

        expect(len_array(text_area.all_lines))           to_equal(2);
        expect(len_array(text_area.line_colors))         to_equal(2);
        // Visible lines don't change unless you TextArea_Refresh() - or something...
        expect(len_array(text_area.visible_lines))       to_be_zero;
        expect(len_array(text_area.visible_line_colors)) to_be_zero;

        expect(text_area.all_lines[0])   to_equal("Hello, world!");
        expect(text_area.line_colors[0]) to_equal("255000255");
        expect(text_area.all_lines[1])   to_equal("Goodnight, moon!");
        expect(text_area.line_colors[1]) to_equal("171205239"); // #abcdef
    end

    // FONT 101 widths
    // WIDTH of 'Hello, world!' is 71
    // WIDTH of 'Hello, world! ' is 76
    // WIDTH of 'Goodnight, moon!' is 101
    // WIDTH of 'Goodnight, moon! ' is 106
    // WIDTH of 'Hello, world! Hello, world! Hello, world!' is 223
    // WIDTH of 'Goodnight, moon! Goodnight, moon!' is 207
    it("can calculate visible lines based on text area width (with text wrapping)") begin
        text_area = create_textarea({ "font": 101, "width": 250, "height": 1000 });

        TextArea_AddLine(text_area, "Hello, world! Hello, world! Hello, world!");
        TextArea_AddColoredLine(text_area, "Goodnight, moon! Goodnight, moon!", "f0f");

        expect(len_array(text_area.visible_lines))       to_equal(0);
        expect(len_array(text_area.visible_line_colors)) to_equal(0);

        call __TextArea_RecalculateVisibleLines(text_area);
        expect(len_array(text_area.visible_lines))       to_equal(2);
        expect(len_array(text_area.visible_line_colors)) to_equal(2);

        // Reduce the width
        text_area.width = 210; // Long enough for Goognight line, but not Hello
        call __TextArea_RecalculateVisibleLines(text_area);
        expect(len_array(text_area.visible_lines))       to_equal(3);
        expect(len_array(text_area.visible_line_colors)) to_equal(3);
        expect(text_area.visible_lines[0]) to_equal("... ???");

        // Reduce the width more
        text_area.width = 200; // Long enough for Goognight line, but not Hello
        // call __TextArea_RecalculateVisibleLines(text_area);
        // expect(len_array(text_area.visible_lines))       to_equal(4);
        // expect(len_array(text_area.visible_line_colors)) to_equal(4);

        // Reduce the even width more
        // ...
    end

    todo("can calculate visible lines based on text area height");

    ////
    // todo("can get line count");
    // todo("can clear all lines");
    // todo("can remove most recent line");
    // todo("can remove line at index");
    // todo("can enable text wrapping of visible lines (default: on)");
    // todo("can scroll visible text up a given number of lines");
    // todo("can scroll visible text down a given number of lines");
    // todo("can scroll visible text up to the top");
    // todo("can scroll visible text down to the bottom");
    // todo("can calculate visible lines (same as original lines without wrapping)");

    // test("example of calculating line length with different fonts!") begin
    //     SetFont(101);
    //     printf("WIDTH of 'Hello, world!' is %s", get_text_width("Hello, world!"));
    //     printf("WIDTH of 'Hello, world! ' is %s", get_text_width("Hello, world! "));
    //     printf("WIDTH of 'Goodnight, moon!' is %s", get_text_width("Goodnight, moon!"));
    //     printf("WIDTH of 'Goodnight, moon! ' is %s", get_text_width("Goodnight, moon! "));
    //     printf("WIDTH of 'Hello, world! Hello, world! Hello, world!' is %s", get_text_width("Hello, world! Hello, world! Hello, world!"));
    //     printf("WIDTH of 'Goodnight, moon! Goodnight, moon!' is %s", get_text_width("Goodnight, moon! Goodnight, moon!"));
    // end
end
