#include "Waterchip.h"
#include "Common/UI/TextArea.h"

variable _text_areas;

// Helper to create text area.
// Also sets it aside to be destroyed after the test runs.
procedure create_textarea(variable options = 0) begin
    if not _text_areas then begin
        _text_areas = [];
        fix_array(_text_areas);
    end
    variable text_area = TextArea_Create(options);
    call array_push(_text_areas, text_area);
    return text_area;
end

describe("TextArea") begin

    variable text_area;

    teardown begin
        if _text_areas then begin
            foreach text_area in _text_areas call TextArea_Destroy(text_area);
            free_array(_text_areas);
            _text_areas = 0;
        end
    end

    it("has sensible defaults") begin
        text_area = create_textarea;

        // Color defaults to white
        expect(rgb_normalized_to_hex(text_area.color)) to_equal("FFFFFF");

        // Font defaults to 101, most commonly used font
        expect(text_area.font) to_equal(101);
        expect(text_area.line_height) to_equal(10); // Line Height of font 101

        // x,y default to 0,0
        expect(text_area.x) to_equal(0);
        expect(text_area.y) to_equal(0);

        // Width/Height to full screen
        expect(text_area.width) to_equal(get_screen_width);
        expect(text_area.height) to_equal(get_screen_height);

        // default max lines is calculated by height / line_height (round down)
        expect(text_area.max_lines) to_equal(floor(text_area.height / text_area.line_height));

        // default scroll_lines is max_lines
        expect(text_area.scroll_lines) to_equal(text_area.max_lines);

        // By default, adding new lines which aren't visible unless scrolled
        // will NOT scroll down the text area to reveal those!
        expect(text_area.autoscroll) to_be_false;

        // Default is: black background, non-transparent
        expect(text_area.transparent) to_be_false;
        expect(rgb_normalized_to_hex(text_area.background_color)) to_equal("000000");
    end

    it("can provide defaults when creating") begin
        text_area = create_textarea({
            "color":            "#abc",
            "font":             103,
            "line_height":      50,
            "height":           123,
            "width":            456,
            "x":                69,
            "y":                420,
            "background_color": "#def",
            "max_lines":        2,
            "scroll_lines":     1
        });

        expect(text_area.font) to_equal(103);
        expect(text_area.line_height) to_equal(50);
        expect(text_area.height) to_equal(123);
        expect(text_area.width) to_equal(456);
        expect(text_area.x) to_equal(69);
        expect(text_area.y) to_equal(420);
        expect(text_area.max_lines) to_equal(2);
        expect(text_area.scroll_lines) to_equal(1);

        expect(rgb_normalized_to_hex(text_area.color)) to_equal("AABBCC");
        expect(rgb_normalized_to_hex(text_area.background_color)) to_equal("DDEEFF");

        expect(text_area.transparent) to_be_false;

        text_area = create_textarea({
            "transparent": true
        });

        expect(text_area.transparent) to_be_true;

        text_area = create_textarea({
            "font": 103, // 20 line height
            "height": 75 // supports 2x full lines
        });

        // default max lines is calculated by height / line_height (round down)
        expect(text_area.max_lines) to_equal(3);

        // default scroll_lines is max_lines
        expect(text_area.scroll_lines) to_equal(3);
    end

    it("destroying frees fixed arrays") begin
        text_area = create_textarea;

        expect(len_array(text_area._original_lines)) not_to_equal(-1);
        expect(len_array(text_area._original_line_colors)) not_to_equal(-1);
        expect(len_array(text_area._visible_lines)) not_to_equal(-1);
        expect(len_array(text_area._visible_line_colors)) not_to_equal(-1);

        call TextArea_Destroy(text_area);

        expect(len_array(text_area._original_lines)) to_equal(-1);
        expect(len_array(text_area._original_line_colors)) to_equal(-1);
        expect(len_array(text_area._visible_lines)) to_equal(-1);
        expect(len_array(text_area._visible_line_colors)) to_equal(-1);
    end

    // try get_interface_width to see if the window exists (does it only work if visible?)
    todo("destroying destroys window, if created (and can see if window is created)");

    it("defaults line-height to minimum line-height for font") begin
        text_area = create_textarea({ "font": 100 });
        expect(text_area.font) to_equal(100);
        expect(text_area.line_height) to_equal(12);

        text_area = create_textarea({ "font": 101 });
        expect(text_area.font) to_equal(101);
        expect(text_area.line_height) to_equal(10);

        text_area = create_textarea({ "font": 102 });
        expect(text_area.font) to_equal(102);
        expect(text_area.line_height) to_equal(28);

        text_area = create_textarea({ "font": 103 });
        expect(text_area.font) to_equal(103);
        expect(text_area.line_height) to_equal(20);

        text_area = create_textarea({ "font": 104 });
        expect(text_area.font) to_equal(104);
        expect(text_area.line_height) to_equal(26);

        // If you provide an invalid font, the game defaults to 101 (so do we!)
        text_area = create_textarea({ "font": 69 });
        expect(text_area.font) to_equal(101);
        expect(text_area.line_height) to_equal(10);
    end

    it("default max lines is equal to the possible visible lines based on height") begin
        text_area = create_textarea({
            "height": 100,
            "line_height": 20
        });
        expect(text_area.max_lines) to_equal(5);

        text_area = create_textarea({
            "height": 100,
            "line_height": 10
        });
        expect(text_area.max_lines) to_equal(10);

        text_area = create_textarea({
            "height": 100,
            "line_height": 50
        });
        expect(text_area.max_lines) to_equal(2);
    end

    it("cannot set max lines to be greater than max possible visible lines based on height") begin
        text_area = create_textarea({
            "height": 100,
            "line_height": 20,
            "max_lines": 8 // nope!
        });
        expect(text_area.max_lines) to_equal(5);

        text_area = create_textarea({
            "height": 100,
            "line_height": 10,
            "max_lines": 12 // nope!
        });
        expect(text_area.max_lines) to_equal(10);

        text_area = create_textarea({
            "height": 100,
            "line_height": 10,
            "max_lines": 9 // ok!
        });
        expect(text_area.max_lines) to_equal(9);
    end

    it("default scroll is equal to the possible visible lines based on height") begin
        text_area = create_textarea({
            "height": 100,
            "line_height": 20
        });
        expect(text_area.scroll_lines) to_equal(5);

        text_area = create_textarea({
            "height": 100,
            "line_height": 10
        });
        expect(text_area.scroll_lines) to_equal(10);

        text_area = create_textarea({
            "height": 100,
            "line_height": 50
        });
        expect(text_area.scroll_lines) to_equal(2);
    end

    it("cannot set scroll lines to be greater than max lines based on height") begin
        text_area = create_textarea({
            "height": 100,
            "line_height": 20,
            "scroll_lines": 69 // nope!
        });
        expect(text_area.scroll_lines) to_equal(5);

        text_area = create_textarea({
            "height": 100,
            "line_height": 10,
            "scroll_lines": 11 // nope!
        });
        expect(text_area.scroll_lines) to_equal(10);

        text_area = create_textarea({
            "height": 100,
            "line_height": 10,
            "scroll_lines": 9 // ok!
        });
        expect(text_area.scroll_lines) to_equal(9);

        text_area = create_textarea({
            "height": 100,
            "line_height": 10,
            "max_lines": 8,
            "scroll_lines": 9 // nope!
        });
        expect(text_area.scroll_lines) to_equal(8);

        text_area = create_textarea({
            "height": 100,
            "line_height": 10,
            "max_lines": 8,
            "scroll_lines": 8 // ok!
        });
        expect(text_area.scroll_lines) to_equal(8);
    end

    it("can provide custom name for text area (its window name)") begin
        text_area = create_textarea({ "name": "MyWindowName" });
        expect(text_area.name) to_equal("MyWindowName");
    end

    it("generates a random, unique window name by default") begin
        text_area = create_textarea;
        expect(text_area.name) not_to_be_empty;
        expect(text_area.name) to_start_with("CommonLibUiTextArea_");

        variable text_area2 = create_textarea;
        expect(text_area2.name) not_to_be_empty;
        expect(text_area2.name) to_start_with("CommonLibUiTextArea_");

        expect(text_area.name) not_to_equal(text_area2.name);
    end

    it("can set default color") begin
        text_area = create_textarea;
        expect(rgb_normalized_to_hex(text_area.color)) to_equal("FFFFFF");

        text_area.color = rgb_normalize_hex("#abc");

        expect(rgb_normalized_to_hex(text_area.color)) to_equal("AABBCC");

        text_area.color = rgb_normalize_hex("0055cc");

        expect(rgb_normalized_to_hex(text_area.color)) to_equal("0055CC");
    end

    it("supports web color names for text and background color") begin
        text_area = create_textarea({
            "color": "deep pink",
            "background_color": "hot pink"
        });

        expect(rgb_normalized_to_hex(text_area.color)) to_equal("FF1493");
        expect(rgb_normalized_to_hex(text_area.background_color)) to_equal("FF69B4");
    end

    it("can add lines of text (of default color)") begin
        text_area = create_textarea;
        expect(len_array(text_area._original_lines)) to_be_zero;
        expect(len_array(text_area._original_line_colors)) to_be_zero;

        call TextArea_AddLine(text_area, "Hello, world!");

        expect(len_array(text_area._original_lines)) to_equal(1);
        expect(len_array(text_area._original_line_colors)) to_equal(1);
        expect(text_area._original_lines[0]) to_equal("Hello, world!");
        expect(text_area._original_line_colors[0]) to_equal("255255255");

        text_area.color = rgb_normalize_hex("#abc");
        call TextArea_AddLine(text_area, "Goodnight, moon!");

        expect(len_array(text_area._original_lines)) to_equal(2);
        expect(len_array(text_area._original_line_colors)) to_equal(2);
        expect(text_area._original_lines[0]) to_equal("Hello, world!");
        expect(text_area._original_line_colors[0]) to_equal("255255255");
        expect(text_area._original_lines[1]) to_equal("Goodnight, moon!");
        expect(text_area._original_line_colors[1]) to_equal("170187204"); // #abc
    end

    it("can add lines of text of certain color") begin
        text_area = create_textarea;
        expect(len_array(text_area._original_lines)) to_be_zero;
        expect(len_array(text_area._original_line_colors)) to_be_zero;

        call TextArea_AddColoredLine(text_area, "Hello, world!", "f0f");

        expect(len_array(text_area._original_lines)) to_equal(1);
        expect(len_array(text_area._original_line_colors)) to_equal(1);
        expect(text_area._original_lines[0]) to_equal("Hello, world!");
        expect(text_area._original_line_colors[0]) to_equal("255000255");

        call TextArea_AddColoredLine(text_area, "Goodnight, moon!", "abcdef");

        expect(len_array(text_area._original_lines)) to_equal(2);
        expect(len_array(text_area._original_line_colors)) to_equal(2);
        expect(text_area._original_lines[0]) to_equal("Hello, world!");
        expect(text_area._original_line_colors[0]) to_equal("255000255");
        expect(text_area._original_lines[1]) to_equal("Goodnight, moon!");
        expect(text_area._original_line_colors[1]) to_equal("171205239"); // #abcdef
    end

    it("can clear all lines") begin
        // 20 height is tall enough for 2x lines (TODO: allow for/add a "max_lines" property)
        text_area = create_textarea({
            "width": 300,
            "height": 20,
            "font": 101,
            "autoscroll": true
        });

        expect(text_area.max_lines) to_equal(2); // 101 20px height

        expect(len_array(text_area._original_lines)) to_be_zero;
        expect(len_array(text_area._original_line_colors)) to_be_zero;
        expect(len_array(text_area._visible_lines)) to_be_zero;
        expect(len_array(text_area._visible_line_colors)) to_be_zero;

        call TextArea_AddLine(text_area, "Hello, world!");
        call TextArea_AddColoredLine(text_area, "Goodnight, moon!", "abcdef");

        expect(len_array(text_area._original_lines)) to_equal(2);
        expect(len_array(text_area._original_line_colors)) to_equal(2);
        expect(len_array(text_area._visible_lines)) to_equal(2);
        expect(len_array(text_area._visible_line_colors)) to_equal(2);
        expect(text_area._visible_lines_start) to_equal(0);
        expect(text_area._visible_line_count) to_equal(2);

        call TextArea_Clear(text_area);

        expect(len_array(text_area._original_lines)) to_be_zero;
        expect(len_array(text_area._original_line_colors)) to_be_zero;
        expect(len_array(text_area._visible_lines)) to_be_zero;
        expect(len_array(text_area._visible_line_colors)) to_be_zero;
        expect(text_area._visible_lines_start) to_equal(0);
        expect(text_area._visible_line_count) to_equal(0);

        call TextArea_AddLine(text_area, "Hello, world!");

        expect(len_array(text_area._original_lines)) to_equal(1);
        expect(len_array(text_area._original_line_colors)) to_equal(1);
        expect(len_array(text_area._visible_lines)) to_equal(1);
        expect(len_array(text_area._visible_line_colors)) to_equal(1);
        expect(text_area._visible_lines_start) to_equal(0);
        expect(text_area._visible_line_count) to_equal(1);

        call TextArea_AddLine(text_area, "Hi again! This one is too long for the width of this text area. Which auto-scrolls. So the current index of first visible line should change.");

        expect(len_array(text_area._original_lines)) to_equal(2);
        expect(len_array(text_area._original_line_colors)) to_equal(2);
        expect(len_array(text_area._visible_lines)) to_equal(4);
        expect(len_array(text_area._visible_line_colors)) to_equal(4);
        expect(text_area._visible_lines_start) to_equal(2);
        expect(text_area._visible_line_count) to_equal(2);

        call TextArea_Clear(text_area);

        expect(len_array(text_area._original_lines)) to_be_zero;
        expect(len_array(text_area._original_line_colors)) to_be_zero;
        expect(len_array(text_area._visible_lines)) to_be_zero;
        expect(len_array(text_area._visible_line_colors)) to_be_zero;
        expect(text_area._visible_lines_start) to_equal(0);
        expect(text_area._visible_line_count) to_equal(0);
    end

    it("can calculate visible lines based on text area width (with text wrapping)") begin
        text_area = create_textarea({
            "font": 101, "width": 250, "height": 1000, "color": "#0f0"
        });

        call TextArea_AddLine(text_area, "Hello, world! Hello, world! Hello, world!");
        call TextArea_AddColoredLine(text_area, "Goodnight, moon! Goodnight, moon!", "f0f");

        expect(len_array(text_area._visible_lines)) to_equal(2);
        expect(len_array(text_area._visible_line_colors)) to_equal(2);
        expect(text_area._visible_lines[0]) to_equal("Hello, world! Hello, world! Hello, world!");
        expect(text_area._visible_lines[1]) to_equal("Goodnight, moon! Goodnight, moon!");
        expect(text_area._visible_line_colors[0]) to_equal("000255000");
        expect(text_area._visible_line_colors[1]) to_equal("255000255");

        // Reduce the width & clear the text_area & re-add some lines
        text_area.width = 210; // Long enough for Goognight line, but not Hello
        call TextArea_Clear(text_area);
        call TextArea_AddLine(text_area, "Hello, world! Hello, world! Hello, world!");
        call TextArea_AddColoredLine(text_area, "Goodnight, moon! Goodnight, moon!", "f0f");

        expect(len_array(text_area._visible_lines)) to_equal(3);
        expect(len_array(text_area._visible_line_colors)) to_equal(3);
        expect(text_area._visible_lines[0]) to_equal("Hello, world! Hello, world! Hello,");
        expect(text_area._visible_lines[1]) to_equal(" world!");
        expect(text_area._visible_lines[2]) to_equal("Goodnight, moon! Goodnight, moon!");
        expect(text_area._visible_line_colors[0]) to_equal("000255000");
        expect(text_area._visible_line_colors[1]) to_equal("000255000");
        expect(text_area._visible_line_colors[2]) to_equal("255000255");

        // Reduce the width more
        text_area.width = 200; // No longer long enough for Goornight line
        call TextArea_Clear(text_area);
        call TextArea_AddLine(text_area, "Hello, world! Hello, world! Hello, world!");
        call TextArea_AddColoredLine(text_area, "Goodnight, moon! Goodnight, moon!", "f0f");

        expect(len_array(text_area._visible_lines)) to_equal(4);
        expect(len_array(text_area._visible_line_colors)) to_equal(4);
        expect(text_area._visible_lines[0]) to_equal("Hello, world! Hello, world! Hello,");
        expect(text_area._visible_lines[1]) to_equal(" world!");
        expect(text_area._visible_lines[2]) to_equal("Goodnight, moon! Goodnight,");
        expect(text_area._visible_lines[3]) to_equal(" moon!");
        expect(text_area._visible_line_colors[0]) to_equal("000255000");
        expect(text_area._visible_line_colors[1]) to_equal("000255000");
        expect(text_area._visible_line_colors[2]) to_equal("255000255");
        expect(text_area._visible_line_colors[3]) to_equal("255000255");

        // Reduce the even width more
        text_area.width = 100; // So small!
        call TextArea_Clear(text_area);
        call TextArea_AddColoredLine(text_area, "Goodnight, moon! Goodnight, moon!", "f0f");

        expect(len_array(text_area._visible_lines)) to_equal(4);
        expect(len_array(text_area._visible_line_colors)) to_equal(4);
        expect(text_area._visible_lines[0]) to_equal("Goodnight,");
        expect(text_area._visible_lines[1]) to_equal(" moon!");
        expect(text_area._visible_lines[2]) to_equal(" Goodnight,");
        expect(text_area._visible_lines[3]) to_equal(" moon!");
        expect(text_area._visible_line_colors[0]) to_equal("255000255");
        expect(text_area._visible_line_colors[1]) to_equal("255000255");
        expect(text_area._visible_line_colors[2]) to_equal("255000255");
        expect(text_area._visible_line_colors[3]) to_equal("255000255");

        // Then try impossibly small, like 10px - no words render this small
        text_area.width = 10; // So small!
        call TextArea_Clear(text_area);
        call TextArea_AddColoredLine(text_area, "Goodnight, moon! Goodnight, moon!", "f0f");

        // Just straight up can't render it.
        expect(len_array(text_area._visible_lines)) to_equal(0);
        expect(len_array(text_area._visible_line_colors)) to_equal(0);

        // Finally, try zero width
        text_area.width = 0; // So small!
        call TextArea_Clear(text_area);
        call TextArea_AddColoredLine(text_area, "Goodnight, moon! Goodnight, moon!", "f0f");

        // Just straight up can't render it.
        expect(len_array(text_area._visible_lines)) to_equal(0);
        expect(len_array(text_area._visible_line_colors)) to_equal(0);
    end

    it("can calculate visible lines based on text area height (autoscroll: false)") begin
        text_area = create_textarea({
            "font": 101, "width": 1000, "height": 20, "color": "#0f0"
        });

        expect(text_area.height) to_equal(20); // can fit exactly 2 lines.
        expect(text_area.line_height) to_equal(10); // font 101 defaults to 10px
        expect(text_area.autoscroll) to_be_false;  // default

        call TextArea_AddLine(text_area, "Hello, world! Hello, world! Hello, world!");
        call TextArea_AddColoredLine(text_area, "Goodnight, moon! Goodnight, moon!", "f0f");

        expect(text_area._visible_lines_start) to_equal(0);
        expect(text_area._visible_line_count) to_equal(2);

        expect(len_array(text_area._original_lines)) to_equal(2);
        expect(text_area._original_lines[0]) to_equal("Hello, world! Hello, world! Hello, world!");
        expect(text_area._original_lines[1]) to_equal("Goodnight, moon! Goodnight, moon!");
        expect(len_array(text_area._visible_lines)) to_equal(2);
        expect(len_array(text_area._visible_line_colors)) to_equal(2);
        expect(text_area._visible_lines[0]) to_equal("Hello, world! Hello, world! Hello, world!");
        expect(text_area._visible_lines[1]) to_equal("Goodnight, moon! Goodnight, moon!");
        expect(text_area._visible_line_colors[0]) to_equal("000255000");
        expect(text_area._visible_line_colors[1]) to_equal("255000255");

        // if we add another line, the visible lines will STILL be two!
        call TextArea_AddLine(text_area, "More text!");

        // It was added...
        expect(len_array(text_area._original_lines)) to_equal(3);
        expect(text_area._original_lines[0]) to_equal("Hello, world! Hello, world! Hello, world!");
        expect(text_area._original_lines[1]) to_equal("Goodnight, moon! Goodnight, moon!");
        expect(text_area._original_lines[2]) to_equal("More text!");

        // But it is NOT visible! the text area isn't tall enough to display it
        // UPDATE: this just uses a cursor index now :)
        expect(text_area._visible_lines_start) to_equal(0);
        expect(text_area._visible_line_count) to_equal(2);
    end

    xit("can calculate visible lines based on text area height (autoscroll: true)") begin
        text_area = create_textarea({
            "font": 101, "width": 1000, "height": 20, "color": "#0f0", "autoscroll": true
        });

        expect(text_area.height) to_equal(20); // can fit exactly 2 lines.
        expect(text_area.line_height) to_equal(10); // font 101 defaults to 10px
        expect(text_area.autoscroll) to_be_true;   // enabled!

        call TextArea_AddLine(text_area, "Hello, world! Hello, world! Hello, world!");
        call TextArea_AddColoredLine(text_area, "Goodnight, moon! Goodnight, moon!", "f0f");

        expect(text_area._visible_lines_start) to_equal(0);
        expect(text_area._visible_line_count) to_equal(2);

        expect(len_array(text_area._original_lines)) to_equal(2);
        expect(text_area._original_lines[0]) to_equal("Hello, world! Hello, world! Hello, world!");
        expect(text_area._original_lines[1]) to_equal("Goodnight, moon! Goodnight, moon!");
        expect(len_array(text_area._visible_lines)) to_equal(2);
        expect(len_array(text_area._visible_line_colors)) to_equal(2);
        expect(text_area._visible_lines[0]) to_equal("Hello, world! Hello, world! Hello, world!");
        expect(text_area._visible_lines[1]) to_equal("Goodnight, moon! Goodnight, moon!");
        expect(text_area._visible_line_colors[0]) to_equal("000255000");
        expect(text_area._visible_line_colors[1]) to_equal("255000255");

        // if we add another line, the visible lines will STILL be two!
        call TextArea_AddLine(text_area, "More text!");

        // It was added...
        expect(len_array(text_area._original_lines)) to_equal(3);
        expect(text_area._original_lines[0]) to_equal("Hello, world! Hello, world! Hello, world!");
        expect(text_area._original_lines[1]) to_equal("Goodnight, moon! Goodnight, moon!");
        expect(text_area._original_lines[2]) to_equal("More text!");

        // Ah ha! Now the first visible line is no longer included in visible lines! It automatically scrolled!
        // UPDATE: this just uses a cursor index now :)
        expect(text_area._visible_lines_start) to_equal(1);
        expect(text_area._visible_line_count) to_equal(2);
    end

    it("can get count of visible lines") begin
        text_area = create_textarea({
            "max_lines": 3
        });

        expect(TextArea_VisibleLineCount(text_area)) to_equal(0);
        expect(TextArea_TotalLineCount(text_area)) to_equal(0);

        call TextArea_AddLine(text_area, "Hello world");
        expect(TextArea_VisibleLineCount(text_area)) to_equal(1);
        expect(TextArea_TotalLineCount(text_area)) to_equal(1);

        call TextArea_AddLine(text_area, "Hello world");
        expect(TextArea_VisibleLineCount(text_area)) to_equal(2);
        expect(TextArea_TotalLineCount(text_area)) to_equal(2);

        call TextArea_AddLine(text_area, "Hello world");
        expect(TextArea_VisibleLineCount(text_area)) to_equal(3);
        expect(TextArea_TotalLineCount(text_area)) to_equal(3);

        call TextArea_AddLine(text_area, "Hello world");
        expect(TextArea_VisibleLineCount(text_area)) to_equal(3);
        expect(TextArea_TotalLineCount(text_area)) to_equal(4);

        call TextArea_Clear(text_area);
        expect(TextArea_VisibleLineCount(text_area)) to_equal(0);
        expect(TextArea_TotalLineCount(text_area)) to_equal(0);
    end

    it("can scroll up/down to change visible lines shown (if there are non-visible lines) (autoscroll: true)") begin
        text_area = create_textarea({
            "height": 1000,
            "max_lines": 3,
            "autoscroll": true
        });

        expect(text_area._visible_line_count) to_equal(0);
        expect(text_area._visible_lines_start) to_equal(0);
        expect(TextArea_VisibleLineCount(text_area)) to_equal(0);
        expect(TextArea_TotalLineCount(text_area)) to_equal(0);

        call TextArea_AddLine(text_area, "Hello, world!");
        call TextArea_AddLine(text_area, "Hello, world!");
        call TextArea_AddLine(text_area, "Hello, world!");

        expect(text_area._visible_lines_start) to_equal(0);
        expect(text_area._visible_line_count) to_equal(3);
        expect(TextArea_VisibleLineCount(text_area)) to_equal(3);
        expect(TextArea_TotalLineCount(text_area)) to_equal(3);

        // Scrolling does nothing if the lines don't overflow
        call TextArea_Scroll(text_area, 1);
        expect(text_area._visible_lines_start) to_equal(0);
        call TextArea_Scroll(text_area, -1);
        expect(text_area._visible_lines_start) to_equal(0);
        call TextArea_ScrollUp(text_area);
        expect(text_area._visible_lines_start) to_equal(0);
        call TextArea_ScrollDown(text_area);
        expect(text_area._visible_lines_start) to_equal(0);

        call TextArea_AddLine(text_area, "Hello, world!");
        expect(text_area._visible_lines_start) to_equal(1);
        expect(text_area._visible_line_count) to_equal(3);
        expect(TextArea_VisibleLineCount(text_area)) to_equal(3);
        expect(TextArea_TotalLineCount(text_area)) to_equal(4);

        call TextArea_Scroll(text_area, -1);
        expect(text_area._visible_lines_start) to_equal(0);
        call TextArea_Scroll(text_area, -1);
        expect(text_area._visible_lines_start) to_equal(0);
        call TextArea_Scroll(text_area, 1);
        expect(text_area._visible_lines_start) to_equal(1);
        call TextArea_Scroll(text_area, 1);
        expect(text_area._visible_lines_start) to_equal(1); // can't scroll further down!
        call TextArea_Scroll(text_area, -1);
        expect(text_area._visible_lines_start) to_equal(0);
        call TextArea_Scroll(text_area, -1);
        expect(text_area._visible_lines_start) to_equal(0); // can't scroll further up!
        call TextArea_ScrollDown(text_area);
        expect(text_area._visible_lines_start) to_equal(1);
        call TextArea_ScrollUp(text_area);
        expect(text_area._visible_lines_start) to_equal(0);

        call TextArea_AddLine(text_area, "Hello, world!");
        expect(text_area._visible_lines_start) to_equal(2); // auto scrolls to the bottom

        call TextArea_Scroll(text_area, 1);
        expect(text_area._visible_lines_start) to_equal(2); // can't scroll further down
        call TextArea_ScrollUp(text_area);
        expect(text_area._visible_lines_start) to_equal(0);
        call TextArea_ScrollDown(text_area);
        expect(text_area._visible_lines_start) to_equal(2);

        call TextArea_AddLine(text_area, "Hello, world!"); // <-- 2 pages
        call TextArea_AddLine(text_area, "Hello, world!"); // <-- over 2 pages

        expect(TextArea_TotalLineCount(text_area)) to_equal(7);
        expect(text_area._visible_line_count) to_equal(3); // max lines = 3
        expect(text_area._visible_lines_start) to_equal(4);

        call TextArea_ScrollUp(text_area);
        expect(text_area._visible_lines_start) to_equal(1);
        call TextArea_ScrollUp(text_area);
        expect(text_area._visible_lines_start) to_equal(0);
        call TextArea_ScrollUp(text_area);
        expect(text_area._visible_lines_start) to_equal(0);

        call TextArea_ScrollDown(text_area);
        expect(text_area._visible_lines_start) to_equal(3);
        call TextArea_ScrollDown(text_area);
        expect(text_area._visible_lines_start) to_equal(4);
        call TextArea_ScrollDown(text_area);
        expect(text_area._visible_lines_start) to_equal(4);
    end

    it("can scroll to top and scroll to bottom") begin
        text_area = create_textarea({
            "max_lines": 3
        });

        call TextArea_AddLine(text_area, "Hello world"); // 1
        call TextArea_AddLine(text_area, "Hello world"); // 2
        call TextArea_AddLine(text_area, "Hello world"); // 3
        call TextArea_AddLine(text_area, "Hello world"); // 4
        call TextArea_AddLine(text_area, "Hello world"); // 5
        call TextArea_AddLine(text_area, "Hello world"); // 6
        call TextArea_AddLine(text_area, "Hello world"); // 7
        call TextArea_AddLine(text_area, "Hello world"); // 8   /// 3
        call TextArea_AddLine(text_area, "Hello world"); // 9   /// max
        call TextArea_AddLine(text_area, "Hello world"); // 10  /// lines

        expect(text_area._visible_lines_start) to_equal(0);

        call TextArea_ScrollToBottom(text_area);
        expect(text_area._visible_lines_start) to_equal(7);

        call TextArea_ScrollToTop(text_area);
        expect(text_area._visible_lines_start) to_equal(0);
    end

    todo("confirm that AddColoredLine takes web colors");

    todo("can get the line under the cursor and its colors and action");

    todo("can hover over line with mouse and it'll show hover color if hover enabled");

    todo("can provide actions which clicking on a line triggers");

    // TODO - rename to .id
    todo("require name to be 12 characters or fewer (?) truncate");

    // For the TextArea rendered by TextInput ?????
    todo("can render trunctated text (when overflow) anchored left");
    todo("can render truncated text (when overflow) anchored right");
end
